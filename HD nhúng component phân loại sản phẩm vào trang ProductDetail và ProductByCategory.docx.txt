1. CHA1 ProductDetailScreen truyền vào cho con là CategorySelector:
+ mảng categories để cho con CategorySelector list ra.
+ id của category của sản phẩm được chọn ở trang Sản phẩm (để làm đậm màu xanh).
Con CategorySelector cần phải truyền cái categoryId (khi người dùng
chọn) cho cha là ProductDetailScreen để điều hướng tới 
ProductsByCategory với tham số id đó =>cha ProductDetailScreen 
phải định nghĩa 1 hàm với tham số nhận: handleSelectCategory(id)=>phải truyền vào cho con hàm này dưới dạng props. Do đó, cha1 sẽ truyền thêm 1 props nữa đặt tên là onSelect={ handleSelectCategory }
<CategorySelector
       categories={categories}   // mảng categories do ProductDetailScreen fetch được
       selectedId={product.categoryId}  // ID của loại sản phẩm hiện tại (dùng để highlight)
       onSelect={handleSelectCategory}  // là hàm callback handleSelectCategory, được định nghĩa trong ProductDetailScreen. Khi người dùng nhấn nút loại sản phẩm trong CategorySelector, nó sẽ gọi onSelect với id của loại sản phẩm.
      />
2. Cha2 ProductsByCategoryScreen sẽ truyền vào cho con là CategorySelector:
+ mảng categories để cho con CategorySelector list ra.
+ id của category khi người dùng chọn trên CategorySelector =>để cha ProductsByCategoryScreen làm đậm category được chọn.
Cha2 muốn nhận được id category truyền từ con CategorySelector để lọc ra các sản phẩm tương ứng với category id đó thì cha2 phải định nghĩa 1 hàm để nhận về id rồi cập nhật vào state selectedCategoryId: (id) => setSelectedCategoryId(id) rồi truyền hàm này vào dưới dạng props có tên onSelect:        onSelect={(id) => setSelectedCategoryId(id)}:
<CategorySelector
        categories={categories}
        selectedId={selectedCategoryId}
        onSelect={(id) => setSelectedCategoryId(id)} //// 👈 Đây là hàm inline của ProductsByCategoryScreen
        // id này là cat.id từ CategorySelector truyền ngược lên.
      />
-----------------
Hd các bước tạo (Trang Sanpham3Sqlite.tsx đã có ở bài trước):
1. Cập nhật AppNavigatorProduct.tsx
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import Sanpham3Sqlite from './Sanpham3Sqlite';
import ProductDetailScreen from './ProductDetailScreen';
import ProductListScreen from './ProductsByCategoryScreen';
import ProductsByCategoryScreen from './ProductsByCategoryScreen';
import { Category, Product } from './database';
//Áo cổ lọ
// ✅ Mở rộng type cho tất cả các màn hình
export type RootStackParamList = {
  Sanpham3Sqlite: undefined;
  ProductDetail: { product: Product };
  ProductsByCategory: { categoryId: number; categoryName?: string }; // mới
};


// Gán type này cho Stack Navigator
const Stack = createNativeStackNavigator<RootStackParamList>();


export default function AppNavigatorProduct() {
  return (
    <Stack.Navigator>
      {/* Màn hình cũ */}
      <Stack.Screen name="Sanpham3Sqlite" component={Sanpham3Sqlite} options={{ title: 'Tất cả sản phẩm' }} />
      <Stack.Screen name="ProductDetail" component={ProductDetailScreen} options={{ title: 'Chi tiết sản phẩm' }} />


      {/* Màn hình mới */}
      <Stack.Screen name="ProductsByCategory" component={ProductsByCategoryScreen} />    
    </Stack.Navigator>
  );
}


2. Tạo trang chi tiết:
//trang chi tiết sản phẩm với các nút loại sản phẩm 
// khi nhấn vào một loại sản phẩm, sẽ điều hướng đến ProductsByCategoryScreen để hiển thị danh sách các sản phẩm thuộc loại đó.
import React, { useEffect, useState } from 'react';
import { View, Text, Image, StyleSheet, ScrollView } from 'react-native';
import { RouteProp, useRoute, useNavigation } from '@react-navigation/native';
import { Product, fetchCategories } from './database';
import { Category } from './database';
import CategorySelector from './CategorySelector';
import { RootStackParamList } from './AppNavigatorProduct';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';


type ProductDetailRouteProp = RouteProp<RootStackParamList, 'ProductDetail'>;
type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'ProductsByCategory'>;


const ProductDetailScreen = () => {
  const route = useRoute<ProductDetailRouteProp>();
  const navigation = useNavigation<NavigationProp>();
  const { product } = route.params;


  const [categories, setCategories] = useState<Category[]>([]);


  useEffect(() => {
    const load = async () => {
      const cats = await fetchCategories();
      setCategories(cats);
    };
    load();
  }, []);


  const getImageSource = (img: string) => {
    if (img.startsWith('file://')) return { uri: img };
    switch (img) {
      case 'hinh1.jpg':
        return require('../../assets/book_images/hinh1.jpg');
      case 'hinh2.jpg':
        return require('../../assets/book_images/hinh2.jpg');
      default:
        return require('../../assets/book_images/hinh1.jpg');
    }
  };


  const handleSelectCategory = (id: number) => {
    const selected = categories.find((c) => c.id === id);
    if (selected) {
        console.log('Selected category:', selected);
      navigation.navigate('ProductsByCategory', {
        categoryId: selected.id,
        categoryName: selected.name, // nếu có
      });
    }
  };


  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Image source={getImageSource(product.img)} style={styles.image} />
      <Text style={styles.name}>{product.name}</Text>
      <Text style={styles.price}>{product.price.toLocaleString()} đ</Text>


      <Text style={styles.label}>Xem các sản phẩm khác:</Text>
      <CategorySelector
       categories={categories}   // mảng categories do ProductDetailScreen fetch được
       selectedId={product.categoryId}  // ID của loại sản phẩm hiện tại (dùng để highlight)
       onSelect={handleSelectCategory}  // là hàm callback handleSelectCategory, được định nghĩa trong ProductDetailScreen. Khi người dùng nhấn nút loại sản phẩm trong CategorySelector, nó sẽ gọi onSelect với id của loại sản phẩm.
      />
    </ScrollView>
  );
};


const styles = StyleSheet.create({
  container: { padding: 16 },
  image: { width: '100%', height: 200, resizeMode: 'contain' },
  name: { fontSize: 22, fontWeight: 'bold', marginVertical: 10 },
  price: { fontSize: 18, color: '#444', marginBottom: 10 },
  label: { marginTop: 20, fontSize: 16, fontWeight: 'bold' },
});


export default ProductDetailScreen;


3. Tạo trang ProductByCategoryScreen.tsx
import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, Image, StyleSheet, TouchableOpacity } from 'react-native';
import { RouteProp, useNavigation, useRoute } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from './AppNavigatorProduct';
import { Product, Category, fetchCategories, fetchProductsByCategory } from './database';
import CategorySelector from './CategorySelector';


// Định nghĩa kiểu navigation cho stack
type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'ProductsByCategory'>;
type RouteProps = RouteProp<RootStackParamList, 'ProductsByCategory'>;


export default function ProductsByCategoryScreen() {
  const navigation = useNavigation<NavigationProp>();
  const route = useRoute<RouteProps>();


  // Lấy categoryId và categoryName từ params
  const { categoryId, categoryName } = route.params;


  const [categories, setCategories] = useState<Category[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedCategoryId, setSelectedCategoryId] = useState(categoryId);


  useEffect(() => {
    fetchCategories().then(setCategories);
  }, []);


  useEffect(() => {
    fetchProductsByCategory(selectedCategoryId).then(setProducts);
  }, [selectedCategoryId]);


  const getImageSource = (img: string) => {
    if (img.startsWith('file://')) return { uri: img };
    switch (img) {
      case 'hinh1.jpg': return require('../../assets/book_images/hinh1.jpg');
      case 'hinh2.jpg': return require('../../assets/book_images/hinh2.jpg');
      default: return require('../../assets/book_images/hinh1.jpg');
    }
  };


  return (
    <View style={{ flex: 1, padding: 10 }}>
      <CategorySelector
        categories={categories}
        selectedId={selectedCategoryId}
        onSelect={(id) => setSelectedCategoryId(id)} //// 👈 Đây là hàm inline của ProductsByCategoryScreen
        // id này là cat.id từ CategorySelector truyền ngược lên.
      />


      <FlatList
        data={products}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={styles.card}
            onPress={() => navigation.navigate('ProductDetail', { product: item })}
          >
            <Image source={getImageSource(item.img)} style={styles.image} />
            <View style={styles.info}>
              <Text style={styles.name}>{item.name}</Text>
              <Text>{item.price.toLocaleString()} đ</Text>
            </View>
          </TouchableOpacity>
        )}
      />
    </View>
  );
}


const styles = StyleSheet.create({
  card: {
    flexDirection: 'row', padding: 10, marginBottom: 10,
    borderWidth: 1, borderColor: '#ccc', borderRadius: 6
  },
  image: { width: 80, height: 80, marginRight: 10 },
  info: { justifyContent: 'center' },
  name: { fontWeight: 'bold' }
});


// Parent (ProductDetailScreen):
//   - Truyền onSelect = handleSelectCategory
//   - Khi nhấn: navigate('ProductsByCategory', ...)


// Parent (ProductsByCategoryScreen):
//   - Truyền onSelect = (id) => setSelectedCategoryId(id)
//   - Khi nhấn: cập nhật state và fetch data
// Việc viết onSelect ở cả 2 component cha hoàn toàn hợp lý, vì nó chỉ là một prop callback truyền xuống, và từng component cha có thể cung cấp logic riêng cho prop đó.


4. Chạy thử và kiểm tra